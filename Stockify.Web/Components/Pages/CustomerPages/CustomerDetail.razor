@page "/customer/{Id:int}"
@inject ICustomerService svc
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using Stockify.Web.ViewModels
@using Stockify.Web.Components.Shared
@attribute [Authorize]

@*Customer detail page. Show customer details, with modal to change all customer data
As in most pages, the current logged in user id is retrieved from the authenticationstateprovider, 
for logging. Also a delete button. This anonimizes the customer. Delivered orders will show placeholder data for the customer, only the zip-code is retained
*@


<h3>Klantdetails</h3>

@if (IsLoading)
{
	<div class="d-flex justify-content-center my-4">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Laden...</span>
		</div>
	</div>
}
else if (Customer == null)
{
	<p>Geen klant gevonden.</p>
}
else
{
	<div class="card">
		<div class="card-body">
			<h5 class="card-title">@Customer.Name</h5>
			<p class="card-text">@Customer.Street, @Customer.ZipCode @Customer.City</p>
			<button class="btn btn-primary me-2" disabled="@(!IsActive)" @onclick="ShowEditModal"><i class="bi bi-pencil-square"></i>Bijwerken</button>
			<button class="btn btn-danger" disabled="@(!IsActive)" @onclick="ShowDeleteConfirmation"><i class="bi bi-trash"></i>Verwijderen</button>
		</div>
	</div>
}

@* Edit Modal *@
@if (ShowEdit)
{
	<EditForm Model="EditModel" OnValidSubmit="UpdateCustomer">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="modal fade show d-block" tabindex="-1">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Klant bewerken</h5>
						<button type="button" class="btn-close" @onclick="HideEditModal"></button>
					</div>
					<div class="modal-body">
						<div class="mb-3">
							<label class="form-label">Naam</label>
							<InputText class="form-control" @bind-Value="EditModel.Name" />
							<ValidationMessage For="@(() => EditModel.Name)" />
						</div>
						<div class="mb-3">
							<label class="form-label">Email</label>
							<InputText class="form-control" @bind-Value="EditModel.Email" />
							<ValidationMessage For="@(() => EditModel.Email)" />
						</div>
						<div class="mb-3">
							<label class="form-label">Adres</label>
							<InputText class="form-control" @bind-Value="EditModel.Street" />
							<ValidationMessage For="@(() => EditModel.Street)" />
						</div>
						<div class="mb-3">
							<label class="form-label">Nummer</label>
							<InputText class="form-control" @bind-Value="EditModel.HouseNumber" />
							<ValidationMessage For="@(() => EditModel.HouseNumber)" />
						</div>
						<div class="mb-3">
							<label class="form-label">Postcode</label>
							<InputText class="form-control" @bind-Value="EditModel.Zipcode" />
							<ValidationMessage For="@(() => EditModel.Zipcode)" />
						</div>
						<div class="mb-3">
							<label class="form-label">Plaats</label>
							<InputText class="form-control" @bind-Value="EditModel.City" />
							<ValidationMessage For="@(() => EditModel.City)" />
						</div>



					</div>
					<div class="modal-footer">
						<button class="btn btn-secondary" @onclick="HideEditModal">Annuleren</button>
						<button type="submit" class="btn btn-primary">Opslaan</button>
					</div>
				</div>
			</div>
		</div>
		<div class="modal-backdrop fade show"></div>
	</EditForm>
}

@* Delete Confirmation *@
@if (ShowDeleteDialog)
{
	<div class="modal fade show d-block" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Bevestig verwijderen</h5>
					<button type="button" class="btn-close" @onclick="HideDeleteDialog"></button>
				</div>
				<div class="modal-body">
					<p>Weet je zeker dat je deze klant wilt verwijderen?</p>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary" @onclick="HideDeleteDialog">Annuleren</button>
					<button class="btn btn-danger" @onclick="DeleteCustomer">Verwijderen</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	[Parameter] public int Id { get; set; }

	private Customer? Customer;
	private CustomerInputModel EditModel = new();
	private bool IsLoading = true;
	private bool ShowEdit = false;
	private bool ShowDeleteDialog = false;
	private string? currentUserId;
	private bool IsActive = true;

	protected override async Task OnInitializedAsync()
	{
		await LoadCustomer();
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated ?? false)
		{
			currentUserId = user.FindFirst(c => c.Type == "sub")?.Value // OpenID Connect "sub" claim
						?? user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value; // fallback
		}

	}

	private async Task LoadCustomer()
	{
		IsLoading = true;
		Customer = await svc.GetByIdAsync(Id);		
		if (Customer != null)
		{
			IsActive = Customer.IsActive;			
			EditModel = new CustomerInputModel
				{
					Name = Customer.Name,
					Email = Customer.Email,
					Street = Customer.Street,
					HouseNumber = Customer.HouseNumber,
					Zipcode = Customer.ZipCode,
					City = Customer.City
				};
		}
		else
		{

			ToastService.ShowError("Klant niet gevonden.");
			NavigationManager.NavigateTo("/customers");			
		}

		IsLoading = false;
	}

	private void ShowEditModal() => ShowEdit = true;
	private void HideEditModal() => ShowEdit = false;

	private void ShowDeleteConfirmation() => ShowDeleteDialog = true;
	private void HideDeleteDialog() => ShowDeleteDialog = false;

	private async Task UpdateCustomer()
	{
		if (Customer == null) return;

		Customer.Name = EditModel.Name;
		Customer.Email = EditModel.Email;
		Customer.Street = EditModel.Street;
		Customer.HouseNumber = EditModel.HouseNumber; 
		Customer.ZipCode = EditModel.Zipcode;
		Customer.City = EditModel.City;

		await svc.UpdateAsync(Customer, currentUserId);
		ShowEdit = false;
		await LoadCustomer();
		ToastService.ShowSuccess($"Klant is aangepast");
	}

	private async Task DeleteCustomer()
	{
		try
		{
			if (Customer == null) return;
			await svc.SetInactiveAsync(Customer.Id, currentUserId);
			ToastService.ShowSuccess("Klant verwijderd!");
			NavigationManager.NavigateTo("/customers");
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
		finally
		{
			ShowDeleteDialog = false;
		}
	}
}
