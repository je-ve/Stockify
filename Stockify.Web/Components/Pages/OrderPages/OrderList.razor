@page "/orders"
@inject IOrderService svc
@inject IToastService ToastService
@inject IOrderActionService orderActionService
@using Microsoft.AspNetCore.Authorization
@using Stockify.Extensions
@using Stockify.Web.ViewModels
@using Stockify.Web.Components.Shared

@attribute [Authorize]

@*table with summary of existing orders, with a button to add a new order, buttons to deliver, cancel or delete an existing one and a link to view the order detail
	
*@

<PageTitle>Bestellingen</PageTitle>

<h3>Bestellingen</h3>

@if (IsLoading)
{
	<div class="d-flex justify-content-center my-4">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Laden...</span>
		</div>
	</div>
}
else if (Orders == null || Orders.Count == 0)
{
	<p>Geen bestelllingen gevonden.</p>
	<a class="btn btn-ternary text-secondary" href="/order/0">
		<i class="bi bi-plus-lg"></i> Nieuwe bestelling
	</a>

}
else
{
	<div class="d-flex justify-content-end mb-2">
		<PageSizeSelector PageSize="@PageSize" OnPageSizeChanged="ChangePageSize" />

		<div class="mb-2">
			<a class="btn btn-light ms-4 text-secondary border border-1" href="/order/0">
				<span><i class="bi bi-plus-lg"></i> Nieuwe bestelling</span>
			</a>
		</div>
	</div>

	<table class="table table-bordered small">
		<thead>
			<tr class="small">
				<th></th>
				<SortableHeader SortColumn="customerNumber" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Klantnummer
				</SortableHeader>
				<SortableHeader SortColumn="customerName" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Klantnaam
				</SortableHeader>
				<SortableHeader SortColumn="CreatedBy" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Aangemaakt door
				</SortableHeader>
				<SortableHeader SortColumn="CreatedAt" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Aangemaakt op
				</SortableHeader>
				<SortableHeader SortColumn="UpdatedBy" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Gewijzigd door
				</SortableHeader>
				<SortableHeader SortColumn="UpdatedAt" CurrentSortBy="@SortBy" SortAscending="@SortAscending" OnSortChanged="HandleSortChanged">
					Gewijzigd op
				</SortableHeader>
				<th>Status</th>
				<th></th>

			</tr>
		</thead>
		<tbody>
			@foreach (var Order in Orders)
			{
				<tr class="small">
					<td><a href="Order/@Order.Id">@Order.Id</a></td>
					<td>@Order.Customer.Number</td>
					<td>@Order.Customer.Name</td>
					<td>@Order.CreatedBy?.UserName</td>
					<td>@Order.CreatedAt.ToBelgianFormat()</td>
					<td>@Order.UpdatedBy?.UserName</td>
					<td>@Order.UpdatedAt.ToBelgianFormat()</td>
					<td>@Order.Status</td>
					<td class="p-1 pe-0">
						<button class="btn btn-info btn-sm m-0" disabled="@(Order.Status != OrderStatus.Created)" data-bs-toggle="tooltip" title="Markeer als geleverd" @onclick="() => ShowDeliverConfirm(Order.Id)">
							<i class="bi bi-truck"></i>
						</button>
						<button type="button" class="btn btn-warning btn-sm" disabled="@(Order.Status != OrderStatus.Created)" data-bs-toggle="tooltip" title="Markeer als geannuleerd" @onclick="() => ShowCancelConfirm(Order.Id)">
							<i class="bi bi-x-circle text-dark"></i>
						</button>
						<button type="button" class="btn btn-danger btn-sm m-0" disabled="@(Order.Status == OrderStatus.Delivered)" data-bs-toggle="tooltip" title="Bestelling schrappen" @onclick="() => ShowDeleteConfirm(Order.Id)">
							<i class="bi bi-trash"></i>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<Pagination CurrentPage="@CurrentPage" TotalPages="@TotalPages" OnPageChanged="ChangePage" />
}


<ConfirmationModal @ref="ConfirmModal" Title="Bevestig actie" />




@code {
	public List<Order> Orders { get; set; } = new();
	public bool IsLoading { get; set; } = true;
	private bool _showModal = false;
	private bool IsSaving = false;
	private ConfirmationModal ConfirmModal;

	protected override async Task OnInitializedAsync()
	{
		await LoadOrdersData();
	}

	private async Task LoadOrdersData()
	{
		IsLoading = true;
		Orders = new List<Order>();
		var result = await svc.GetPagedAsync(CurrentPage, PageSize, SortBy, SortAscending);
		Orders = result.Items;
		TotalOrders = result.TotalCount;
		TotalPages = (int)Math.Ceiling((double)TotalOrders / PageSize);
		IsLoading = false;
	}

	private void ShowModal() => _showModal = true;
	private void HideModal() => _showModal = false;

	//Leveren
	private void ShowDeliverConfirm(int orderId)
	{
		ConfirmModal.Show(orderId, $"Wil je bestelling {orderId} leveren?", DeliverOrder);
	}
	private async Task DeliverOrder(int orderId)
	{
		IsSaving = true;
		try
		{
			await orderActionService.CreateOrderAction(orderId, OrderActionType.Delivery);
			ToastService.ShowSuccess($"Bestelling {orderId} is gemarkeerd als geleverd.");			
		}
		catch (Exception ex)
		{
			ToastService.ShowError($"Fout bij het leveren van bestelling {orderId}: {ex.Message}");
		}
		finally
		{
			IsSaving = false;
			await LoadOrdersData();
			StateHasChanged();
		}
	}

	//Annuleren
	private void ShowCancelConfirm(int orderId)
	{
		ConfirmModal.Show(orderId, $"Wil je bestelling {orderId} annuleren?", CancelOrder);
	}
	private async Task CancelOrder(int orderId)
	{
		IsSaving = true;
		try
		{
			await orderActionService.CreateOrderAction(orderId, OrderActionType.Cancel);
			ToastService.ShowSuccess($"Bestelling {orderId} is geannuleerd.");			
		}
		catch (Exception ex)
		{
			ToastService.ShowError($"Fout bij het annuleren van bestelling {orderId}: {ex.Message}");
		}
		finally
		{
			IsSaving = false;
			await LoadOrdersData();
			StateHasChanged();
		}
	}

	//Schrappen
	private void ShowDeleteConfirm(int orderId)
	{
		ConfirmModal.Show(orderId, $"Wil je bestelling {orderId} verwijderen?", DeleteOrder);
	}
	private async Task DeleteOrder(int orderId)
	{
		IsSaving = true;
		try
		{
			await orderActionService.CreateOrderAction(orderId, OrderActionType.Delete);
			ToastService.ShowSuccess($"Bestelling {orderId} is verwijderd.");			
		}
		catch (Exception ex)
		{
			ToastService.ShowError($"Fout bij het verwijderen van bestelling {orderId}: {ex.Message}");
			if (ex.InnerException != null)
			{
				ToastService.ShowError($"Inner exception: {ex.InnerException.Message}");
			}

		}
		finally
		{
			IsSaving = false;
			await LoadOrdersData();
			StateHasChanged();
		}
	}	

	// Pagination
	private int CurrentPage = 1;
	private int PageSize = 10;
	private int TotalPages = 1;
	private int TotalOrders = 0;

	private async Task ChangePage(int page)
	{
		if (page < 1 || page > TotalPages) return;
		CurrentPage = page;
		await LoadOrdersData();
	}

	private async Task ChangePageSize(int size)
	{
		if (PageSize != size)
		{
			PageSize = size;
			CurrentPage = 1;
			await LoadOrdersData();
		}
	}

	// Sorting
	private string SortBy = "UpdatedAt";
	private bool SortAscending = false;

	private async Task HandleSortChanged((string Column, bool Ascending) sort)
	{
		SortBy = sort.Column;
		SortAscending = sort.Ascending;
		CurrentPage = 1;
		await LoadOrdersData();
	}
}
