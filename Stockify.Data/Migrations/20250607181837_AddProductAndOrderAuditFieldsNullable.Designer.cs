// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stockify.Data;

#nullable disable

namespace Stockify.Data.Migrations
{
    [DbContext(typeof(StockifyContext))]
    [Migration("20250607181837_AddProductAndOrderAuditFieldsNullable")]
    partial class AddProductAndOrderAuditFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Stockify.Objects.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Stockify.Objects.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Antwerpen",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2558),
                            Name = "Liesbeth Peeters",
                            Street = "Meir",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2560),
                            ZipCode = "2000"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gent",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2563),
                            Name = "Tom De Smet",
                            Street = "Veldstraat",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2563),
                            ZipCode = "9000"
                        },
                        new
                        {
                            Id = 3,
                            City = "Brugge",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2565),
                            Name = "Sofie Maes",
                            Street = "Zuidzandstraat",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2565),
                            ZipCode = "8000"
                        },
                        new
                        {
                            Id = 4,
                            City = "Leuven",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2566),
                            Name = "Bram Janssens",
                            Street = "Bondgenotenlaan",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2567),
                            ZipCode = "3000"
                        },
                        new
                        {
                            Id = 5,
                            City = "Mechelen",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2568),
                            Name = "Eline Willems",
                            Street = "Onze-Lieve-Vrouwestraat",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2568),
                            ZipCode = "2800"
                        },
                        new
                        {
                            Id = 6,
                            City = "Antwerpen",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2569),
                            Name = "Niels Vermeulen",
                            Street = "Groenplaats",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2569),
                            ZipCode = "2000"
                        },
                        new
                        {
                            Id = 7,
                            City = "Oostende",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2570),
                            Name = "Karen Van Damme",
                            Street = "Kapellestraat",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2571),
                            ZipCode = "8400"
                        },
                        new
                        {
                            Id = 8,
                            City = "Kortrijk",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2571),
                            Name = "Dries De Clercq",
                            Street = "Kortrijksesteenweg",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2572),
                            ZipCode = "8500"
                        },
                        new
                        {
                            Id = 9,
                            City = "Knokke-Heist",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2573),
                            Name = "Inge Goossens",
                            Street = "Lippenslaan",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2573),
                            ZipCode = "8300"
                        },
                        new
                        {
                            Id = 10,
                            City = "Brussel",
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2574),
                            Name = "Wim Van den Broeck",
                            Street = "Rue de Namur",
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2574),
                            ZipCode = "1000"
                        });
                });

            modelBuilder.Entity("Stockify.Objects.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Stockify.Objects.OrderAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderActions");
                });

            modelBuilder.Entity("Stockify.Objects.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Stockify.Objects.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastStockAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SerialNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalStock")
                        .HasColumnType("int");

                    b.Property<int>("TotalStockActions")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2705),
                            Name = "Toothbrush",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2705)
                        },
                        new
                        {
                            Id = 2,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2708),
                            Name = "Schrijfbic",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2709)
                        },
                        new
                        {
                            Id = 3,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2714),
                            Name = "Notitieboekje",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2715)
                        },
                        new
                        {
                            Id = 4,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2716),
                            Name = "Afwasborstel",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2716)
                        },
                        new
                        {
                            Id = 5,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2717),
                            Name = "Wc-borstel",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2717)
                        },
                        new
                        {
                            Id = 6,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2718),
                            Name = "Flesopener",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2719)
                        },
                        new
                        {
                            Id = 7,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2719),
                            Name = "Zaklamp",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2720)
                        },
                        new
                        {
                            Id = 8,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2720),
                            Name = "Brooddoos",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2721)
                        },
                        new
                        {
                            Id = 9,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2721),
                            Name = "Koffiemok",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2722)
                        },
                        new
                        {
                            Id = 10,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2722),
                            Name = "Drinkfles",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2723)
                        },
                        new
                        {
                            Id = 11,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2723),
                            Name = "Keukenschaar",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2724)
                        },
                        new
                        {
                            Id = 12,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2724),
                            Name = "Tandenstoker",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2725)
                        },
                        new
                        {
                            Id = 13,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2725),
                            Name = "Stekkerdoos",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2726)
                        },
                        new
                        {
                            Id = 14,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2726),
                            Name = "Timer",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2727)
                        },
                        new
                        {
                            Id = 15,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2727),
                            Name = "Fietslichtje",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2728)
                        },
                        new
                        {
                            Id = 16,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2728),
                            Name = "Ovenwant",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2729)
                        },
                        new
                        {
                            Id = 17,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2729),
                            Name = "Schroevendraaier",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2730)
                        },
                        new
                        {
                            Id = 18,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2730),
                            Name = "Gsm-houder",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2731)
                        },
                        new
                        {
                            Id = 19,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2731),
                            Name = "Rekenmachine",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2732)
                        },
                        new
                        {
                            Id = 20,
                            AvailableStock = 0,
                            CreatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2732),
                            Name = "Geurkaars",
                            SerialNumber = 0L,
                            TotalStock = 0,
                            TotalStockActions = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 18, 18, 37, 561, DateTimeKind.Utc).AddTicks(2733)
                        });
                });

            modelBuilder.Entity("Stockify.Objects.StockAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ProductId");

                    b.ToTable("StockActions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockify.Objects.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stockify.Objects.Customer", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Stockify.Objects.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Stockify.Objects.Order", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Stockify.Objects.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockify.Objects.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Stockify.Objects.OrderAction", b =>
                {
                    b.HasOne("Stockify.Objects.Order", "Order")
                        .WithMany("Actions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Stockify.Objects.OrderLine", b =>
                {
                    b.HasOne("Stockify.Objects.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockify.Objects.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Stockify.Objects.Product", b =>
                {
                    b.HasOne("Stockify.Objects.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Stockify.Objects.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Stockify.Objects.StockAction", b =>
                {
                    b.HasOne("Stockify.Objects.OrderLine", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId");

                    b.HasOne("Stockify.Objects.Product", "Product")
                        .WithMany("StockActions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderLine");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Stockify.Objects.Order", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Stockify.Objects.Product", b =>
                {
                    b.Navigation("StockActions");
                });
#pragma warning restore 612, 618
        }
    }
}
